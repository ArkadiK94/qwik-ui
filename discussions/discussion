
export const MyComponent = component$(() => {
  
  return <>
    <FluffyButton class={ } />
    <button class={fluffyButton()} />
    <button class={"p-4 m-4 bg-slate-400"} />
    <FluffyTabs />
    <Tabs class={fluffyTabs({})}/>
   </>
})

<button class={"p-4 m-4 bg-slate-400"} />


<Normalbutton class={"p-4 m-4 bg-slate-400"} />
<BigButton class={"p-8 m-8 bg-slate-400"} />
<SquareButton class={"p-8 m-8 bg-slate-400"} />
<SquareBigButton class={"p-8 m-8 bg-slate-400"} />

<FluffyButton size="small" color="primary" />

  
/**
 * source code of the CVA
 * 
 */

/** configurable boundaries
 * output classes
 * inline styles
 * change css
 * css variables
*/


// =============== Tailwind(shadcn) =================
<button className="p-2 m-4 bg-slate-400 hover:bg-slate-600 hover:m-6" />;

// ============== Panda ===================

<button className={css({p: 2, m: 4, bg: "slate-400", _hover: {bg: "slate-600", m: 6}})} />;


// ============== Uno CSS ===================

<button className="p-2 m-4 bg-slate-400" />;
<button className="p2 m4 bg-slate-400" />;
<button className="p2 m4 bg-slate-400 hover:(bg-slate-600 m-6)" />;


// ============== ShadCn + CVA ===================

config({
  theme: {
    px: 2,
    py: 4,
    colors: {
      slate: {
        400: "#ccc",
        600: "#ddd",
      }
    }
  }
})


// ============================== generated output (inspired by shadcn) ===========================
/**
 * Fluffy Badge
 * 
 * Generated by `qwik-ui generate fluffy tailwind|panda`
 * Feel free to customize
 * Re-run to update, and keep the changes you like
 */
import { component$ } from '@builder.io/qwik'
import { HeadlessBadge } from 'qwik-ui/headless'
import { cva, type VariantProps } from 'qwik-ui/tw-utils'
// Panda: import {cva, grid, circle, focus} from 'qwik-ui/panda-utils'

// cn code:
// import { clsx, type ClassValue } from "clsx"
// import { twMerge } from "tailwind-merge"
// export function cn(...inputs: ClassValue[]) {
//   return twMerge(clsx(inputs))
// }

// macros work like this:
// // in
// <div class={foo? badge({variant: 'secondary'}): badge({'destructive'})} />
// // out
// <div class={
//   `inline-flex items-center rounded-full border px-2 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80`} />

// example util function outputting TW classes
const circle = ({ size: TWSizes }): TWString => `px-${size} py-${size} rounded-full `

//tailwind({ sizes: { sm: 2, md: 4, lg: 8 } });
// tailwindCss({ p: 2 }) 'p-2'

const badge = cva( 
	// Panda: box({center: true, inline: true}) + oval(2, 0.5) + focus(2)
  `inline-flex items-center rounded-full border px-2 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2`,
  {
    variants: {
      variant: {
        default:
          `border-transparent bg-primary text-primary-foreground hover:bg-primary/80`,
        secondary: // Panda: css({border: 'transparent', text: 'secondary-foreground', bg: 'secondary', _hover: {opacity: 80}})
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badge> {}

function Badge({ class: classes, variant, ...props }: BadgeProps) {
  return (
    <HeadlessBadge class={[badge({ variant }), classes]} {...props} />
  )
}

export { Badge, badge as badgeVariants }
// ============================== end of generated output ===========================



